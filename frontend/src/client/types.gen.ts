// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

export type CourseAssignment = {
  id?: string
  course_id: string
  user_id: string
}

export type CourseCreate = {
  title: string
  description?: string | null
  materials?: Array<string> | null
  assign_to_roles?: Array<string> | null
  is_active?: boolean
  is_due?: boolean
  due_date?: string | null
  start_date?: string | null
  assign_to_user_id?: string | null
}

export type CoursePublic = {
  title: string
  description?: string | null
  materials?: Array<string> | null
  assign_to_roles: Array<string>
  is_active?: boolean
  is_due?: boolean
  due_date?: string | null
  start_date?: string | null
  id: string
}

export type CourseUpdate = {
  title?: string | null
  description?: string | null
  is_active?: boolean | null
  is_due?: boolean | null
  due_date?: string | null
  start_date?: string | null
  assign_to_roles?: Array<string> | null
}

export type HTTPValidationError = {
  detail?: Array<ValidationError>
}

export type Message = {
  message: string
}

export type NewPassword = {
  token: string
  new_password: string
}

export type PrivateUserCreate = {
  email: string
  password: string
  name: string
  is_active?: boolean
  is_superuser?: boolean
  role?: string
}

export type QuizAttempt = {
  id?: string
  quiz_id: string
  user_id: string
  score: number
  attempt_number: number
  passed?: boolean
}

export type QuizBase = {
  max_attempts?: number
  passing_threshold?: number
}

export type QuizCreate = {
  max_attempts?: number
  passing_threshold?: number
  course_id: string
  questions?: Array<{
    [key: string]: unknown
  }>
}

export type QuizPublic = {
  max_attempts?: number
  passing_threshold?: number
  id: string
  course_id: string
  questions: Array<{
    [key: string]: unknown
  }>
  attempts: Array<QuizAttempt>
}

export type Role =
  | "admin"
  | "employee"
  | "infirmiera"
  | "oficianta"
  | "brancardier"
  | "asistent medical"
  | "femeie de serviciu"
  | "masaj"
  | "kinetoterapie"
  | "receptie"
  | "contabilitate"
  | "informatica"
  | "resurse umane"
  | "epidemiolog"
  | "managementul calitatii"
  | "farmacist"
  | "birou internari/externari"

export type Token = {
  access_token: string
  token_type?: string
}

export type UpdatePassword = {
  current_password: string
  new_password: string
}

export type UserCreate = {
  user_id: string
  name: string
  email: string
  role?: Role
  is_active?: boolean
  is_superuser?: boolean
  password: string
}

export type UserPublic = {
  user_id: string
  name: string
  email: string
  role?: Role
  is_active?: boolean
  is_superuser?: boolean
  id: string
}

export type UserRegister = {
  email: string
  password: string
  name?: string | null
}

export type UsersPublic = {
  data: Array<UserPublic>
  count: number
}

export type UserUpdate = {
  user_id: string
  name: string
  email: string
  role?: Role
  is_active?: boolean
  is_superuser?: boolean
}

export type UserUpdateMe = {
  name?: string | null
  email?: string | null
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type CoursesReadCoursesData = {
  limit?: number
  skip?: number
}

export type CoursesReadCoursesResponse = Array<CoursePublic>

export type CoursesCreateCourseData = {
  requestBody: CourseCreate
}

export type CoursesCreateCourseResponse = CoursePublic

export type CoursesReadCourseByIdData = {
  courseId: string
}

export type CoursesReadCourseByIdResponse = CoursePublic

export type CoursesUpdateCourseData = {
  courseId: string
  requestBody: CourseUpdate
}

export type CoursesUpdateCourseResponse = CoursePublic

export type CoursesDeleteCourseData = {
  courseId: string
}

export type CoursesDeleteCourseResponse = Message

export type CoursesAssignCourseData = {
  courseId: string
  userId: string
}

export type CoursesAssignCourseResponse = CourseAssignment

export type LoginLoginAccessTokenData = {
  formData: Body_login_login_access_token
}

export type LoginLoginAccessTokenResponse = Token

export type LoginTestTokenResponse = UserPublic

export type LoginRecoverPasswordData = {
  email: string
}

export type LoginRecoverPasswordResponse = Message

export type LoginResetPasswordData = {
  requestBody: NewPassword
}

export type LoginResetPasswordResponse = Message

export type LoginRecoverPasswordHtmlContentData = {
  email: string
}

export type LoginRecoverPasswordHtmlContentResponse = string

export type PrivateCreateUserData = {
  requestBody: PrivateUserCreate
}

export type PrivateCreateUserResponse = UserPublic

export type QuizzesReadQuizzesData = {
  limit?: number
  skip?: number
}

export type QuizzesReadQuizzesResponse = Array<QuizBase>

export type QuizzesCreateQuizData = {
  courseId: string
  requestBody: QuizCreate
}

export type QuizzesCreateQuizResponse = QuizPublic

export type QuizzesReadQuizByIdData = {
  quizId: string
}

export type QuizzesReadQuizByIdResponse = QuizBase

export type QuizzesUpdateQuizData = {
  quizId: string
  requestBody: QuizCreate
}

export type QuizzesUpdateQuizResponse = QuizBase

export type QuizzesDeleteQuizData = {
  quizId: string
}

export type QuizzesDeleteQuizResponse = Message

export type QuizzesSubmitQuizAttemptData = {
  quizId: string
  score: number
}

export type QuizzesSubmitQuizAttemptResponse = QuizAttempt

export type QuizzesGetQuizAttemptsData = {
  quizId: string
}

export type QuizzesGetQuizAttemptsResponse = Array<QuizAttempt>

export type UsersReadUsersData = {
  limit?: number
  skip?: number
}

export type UsersReadUsersResponse = UsersPublic

export type UsersCreateUserData = {
  requestBody: UserCreate
}

export type UsersCreateUserResponse = UserPublic

export type UsersReadUserMeResponse = UserPublic

export type UsersDeleteUserMeResponse = Message

export type UsersUpdateUserMeData = {
  requestBody: UserUpdateMe
}

export type UsersUpdateUserMeResponse = UserPublic

export type UsersUpdatePasswordMeData = {
  requestBody: UpdatePassword
}

export type UsersUpdatePasswordMeResponse = Message

export type UsersRegisterUserData = {
  requestBody: UserRegister
}

export type UsersRegisterUserResponse = UserPublic

export type UsersReadUserByIdData = {
  userId: string
}

export type UsersReadUserByIdResponse = UserPublic

export type UsersUpdateUserData = {
  requestBody: UserUpdate
  userId: string
}

export type UsersUpdateUserResponse = UserPublic

export type UsersDeleteUserData = {
  userId: string
}

export type UsersDeleteUserResponse = Message

export type UtilsTestEmailData = {
  emailTo: string
}

export type UtilsTestEmailResponse = Message

export type UtilsHealthCheckResponse = boolean
